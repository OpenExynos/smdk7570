<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\MDK_Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\MDK_Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Aug 22 16:40:11 2016
<BR><P>
<H3>Maximum Stack Usage =        268 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; icm_init &rArr; icm_set_sample_rate &rArr; icm_lp_accel_mode &rArr;  icm_set_sample_rate (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[10f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[11]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PendSV_Handler</a><BR>
 <LI><a href="#[12]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SysTick_Handler</a><BR>
 <LI><a href="#[25]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[df]">icm_lp_accel_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">icm_set_sample_rate</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[29]">COMP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[28]">DAC_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[20]">DMA1_Channel3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[22]">DMA1_Channel5_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[23]">DMA1_Channel6_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[24]">DMA1_Channel7_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from gpio.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from i2c_slave.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from i2c_slave.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2b]">LCD_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3c]">RTC_Alarm_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[16]">RTC_WKUP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[40]">SystemInit</a> from system_stm32l1xx.o(.text) referenced from startup_stm32l1xx_md.o(.text)
 <LI><a href="#[15]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2d]">TIM10_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2e]">TIM11_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3e]">TIM6_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3f]">TIM7_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2c]">TIM9_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3d]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[26]">USB_HP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[27]">USB_LP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[42]">__main</a> from __main.o(!!!main) referenced from startup_stm32l1xx_md.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[43]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[45]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[131]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[132]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[133]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[134]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[135]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[136]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[46]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[137]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[138]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[139]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[140]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[141]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[142]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[143]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[144]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[145]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[146]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[147]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[148]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[149]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[50]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[44]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[150]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[48]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[151]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; icm_init &rArr; icm_set_sample_rate &rArr; icm_lp_accel_mode &rArr;  icm_set_sample_rate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[152]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[110]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[153]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[51]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[154]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[98]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_Config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_p_sensor_int
</UL>

<P><STRONG><a name="[156]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>GPIO_DeInit</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32l1xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphResetCmd
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_InitHardware
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_p_sensor_int
</UL>

<P><STRONG><a name="[159]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_InitHardware
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
</UL>

<P><STRONG><a name="[163]"></a>RCC_DeInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[55]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[165]"></a>RCC_AdjustMSICalibrationValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>RCC_MSIRangeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>RCC_MSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>RCC_LSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>RCC_MCOConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[175]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>RCC_RTCResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_InitHardware
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_p_sensor_int
</UL>

<P><STRONG><a name="[cf]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_p_sensor_int
</UL>

<P><STRONG><a name="[93]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_timer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_InitHardware
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
</UL>

<P><STRONG><a name="[54]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[58]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
</UL>

<P><STRONG><a name="[5a]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_InitHardware
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>

<P><STRONG><a name="[178]"></a>RCC_AHBPeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>SYSCFG_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[17f]"></a>SYSCFG_RIDeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>SYSCFG_USBPuCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32l1xx_syscfg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_p_sensor_int
</UL>

<P><STRONG><a name="[182]"></a>SYSCFG_RITIMSelect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>SYSCFG_RITIMInputCaptureConfig</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>SYSCFG_RIResistorConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>SYSCFG_RIIOSwitchConfig</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>SYSCFG_RISwitchControlModeCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>SYSCFG_RIHysteresisConfig</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_p_sensor_int
</UL>

<P><STRONG><a name="[189]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
</UL>

<P><STRONG><a name="[5b]"></a>I2C_Init</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_Config
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
</UL>

<P><STRONG><a name="[18d]"></a>I2C_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_deinit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_Config
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
</UL>

<P><STRONG><a name="[a0]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write_register
</UL>

<P><STRONG><a name="[9d]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write_register
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
</UL>

<P><STRONG><a name="[97]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_Config
</UL>

<P><STRONG><a name="[18e]"></a>I2C_OwnAddress2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>I2C_DualAddressCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>I2C_GeneralCallCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
</UL>

<P><STRONG><a name="[191]"></a>I2C_SMBusAlertConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>I2C_ARPCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_Config
</UL>

<P><STRONG><a name="[192]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>I2C_FastModeDutyCycleConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write_register
</UL>

<P><STRONG><a name="[90]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write_register
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>I2C_TransmitPEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>I2C_PECPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>I2C_CalculatePEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>I2C_GetPEC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>I2C_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>I2C_DMALastTransferCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write_register
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>I2C_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_Config
</UL>

<P><STRONG><a name="[19a]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>I2C_GetLastEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_GetLastEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write_register
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>I2C_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
</UL>

<P><STRONG><a name="[19b]"></a>I2C_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>TIM_DeInit</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[c2]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_timer
</UL>

<P><STRONG><a name="[c1]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_timer
</UL>

<P><STRONG><a name="[19d]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_timer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>

<P><STRONG><a name="[1a8]"></a>TIM_OC1Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>TIM_OC2Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>TIM_OC3Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>TIM_OC4Init</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>TIM_OCStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>TIM_SelectOCREFClear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[64]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[62]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[60]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[5e]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[1c8]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[1c9]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_timer
</UL>

<P><STRONG><a name="[1d2]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[68]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[6a]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[6c]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[6b]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[6d]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1d6]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>main</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = main &rArr; icm_init &rArr; icm_set_sample_rate &rArr; icm_lp_accel_mode &rArr;  icm_set_sample_rate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr559_ps_enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr559_als_read
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_ps_read
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_dev_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_als_enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sensors
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sample_rate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_sample_rate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_gyro_reg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_gyro_fsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_accel_reg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_accel_fsr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_configure_fifo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_forced_mode_get_temperature_and_pressure
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak0991x_enable_sensor
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak09916_run_selftest
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak09916_poll_data
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak09916_compare_whoami
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_SLAVE_SendData
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1dc]"></a>Delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>SystemInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, system_stm32l1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockToHSI
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(.text)
</UL>
<P><STRONG><a name="[1dd]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 220 bytes, Stack size 20 bytes, system_stm32l1xx.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, i2c_slave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C2_EV_IRQHandler &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i2c_slave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C2_ER_IRQHandler &rArr; I2C_GetLastEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2CDRV_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i2c_slave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = I2CDRV_Init &rArr; I2CDRV_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_InitHardware
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>I2CDRV_SLAVE_SendData</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, i2c_slave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CDRV_SLAVE_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>I2CDRV_SLAVE_ReadData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, i2c_slave.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[70]"></a>i2c_master_init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = i2c_master_init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>i2c_master_write_register</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_i2c_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_write_register
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akm09916_i2c_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>

<P><STRONG><a name="[a2]"></a>i2c_master_read_register</STRONG> (Thumb, 972 bytes, Stack size 32 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_i2c_read
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_read_register
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akm09916_i2c_read
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>

<P><STRONG><a name="[a3]"></a>i2c_master_deinit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>

<P><STRONG><a name="[7f]"></a>ak09916_poll_data</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, akm09916.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ak09916_poll_data &rArr; akm09916_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akm09916_i2c_read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akm09916_i2c_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>ak09916_run_selftest</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, akm09916.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ak09916_run_selftest &rArr; akm09916_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akm09916_i2c_read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akm09916_i2c_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>ak09916_compare_whoami</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, akm09916.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ak09916_compare_whoami &rArr; akm09916_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akm09916_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>ak09916_soft_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, akm09916.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ak09916_soft_reset &rArr; akm09916_i2c_write &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akm09916_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak0991x_enable_sensor
</UL>

<P><STRONG><a name="[73]"></a>ak0991x_enable_sensor</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, akm09916.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ak0991x_enable_sensor &rArr; ak09916_soft_reset &rArr; akm09916_i2c_write &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak09916_soft_reset
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akm09916_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>bmp280_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bmp280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = bmp280_reset &rArr; bmp280_write_register &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_init
</UL>

<P><STRONG><a name="[71]"></a>bmp280_init</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, bmp280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = bmp280_init &rArr; bmp280_reset &rArr; bmp280_write_register &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_read_register
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_write_register
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_demo
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>bmp280_set_standby_time</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bmp280.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_write_register
</UL>

<P><STRONG><a name="[ad]"></a>bmp280_set_work_mode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bmp280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bmp280_set_work_mode &rArr; bmp280_write_register &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_forced_mode_get_temperature_and_pressure
</UL>

<P><STRONG><a name="[ae]"></a>bmp280_set_temperature_oversampling_mode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bmp280.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_write_register
</UL>

<P><STRONG><a name="[af]"></a>bmp280_set_pressure_oversampling_mode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bmp280.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_write_register
</UL>

<P><STRONG><a name="[b0]"></a>bmp280_set_filter_mode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bmp280.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_write_register
</UL>

<P><STRONG><a name="[b1]"></a>bmp280_compensate_temperature_double</STRONG> (Thumb, 302 bytes, Stack size 88 bytes, bmp280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bmp280_compensate_temperature_double &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_get_temperature
</UL>

<P><STRONG><a name="[b9]"></a>bmp280_compensate_pressure_double</STRONG> (Thumb, 640 bytes, Stack size 80 bytes, bmp280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bmp280_compensate_pressure_double &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_get_pressure
</UL>

<P><STRONG><a name="[bc]"></a>bmp280_get_temperature</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, bmp280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = bmp280_get_temperature &rArr; bmp280_read_register &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_temperature_double
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_get_temperature_and_pressure
</UL>

<P><STRONG><a name="[bd]"></a>bmp280_get_pressure</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmp280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = bmp280_get_pressure &rArr; bmp280_read_register &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_pressure_double
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_read_register
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_get_temperature_and_pressure
</UL>

<P><STRONG><a name="[be]"></a>bmp280_get_temperature_and_pressure</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bmp280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = bmp280_get_temperature_and_pressure &rArr; bmp280_get_pressure &rArr; bmp280_read_register &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_get_pressure
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_get_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_forced_mode_get_temperature_and_pressure
</UL>

<P><STRONG><a name="[80]"></a>bmp280_forced_mode_get_temperature_and_pressure</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bmp280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = bmp280_forced_mode_get_temperature_and_pressure &rArr; bmp280_get_temperature_and_pressure &rArr; bmp280_get_pressure &rArr; bmp280_read_register &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_get_temperature_and_pressure
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_set_work_mode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_demo
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>bmp280_demo</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bmp280.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_forced_mode_get_temperature_and_pressure
</UL>

<P><STRONG><a name="[c7]"></a>delay_us</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delay_us &rArr; start_timer &rArr; setup_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_delay
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_timer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[6f]"></a>delay_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = delay_ms &rArr; delay_us &rArr; start_timer &rArr; setup_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_demo
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_get_pressure
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr559_ps_enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr559_als_read
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_dev_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_als_enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sensors
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_forced_mode_get_temperature_and_pressure
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak09916_run_selftest
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak09916_poll_data
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_reset_fifo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_bypass
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_20608_biases
</UL>

<P><STRONG><a name="[1de]"></a>delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>ltr553_dev_init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ltr553.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ltr553_dev_init &rArr; ltr553_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_i2c_read
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_i2c_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>ltr559_ps_enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ltr553.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ltr559_ps_enable &rArr; ltr553_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_i2c_read
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_i2c_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>ltr553_als_enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ltr553.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ltr553_als_enable &rArr; ltr553_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_i2c_read
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_i2c_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>ltr553_ps_read</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ltr553.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ltr553_ps_read &rArr; ltr553_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>ltr559_als_read</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, ltr553.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ltr559_als_read &rArr; ltr553_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_i2c_read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>ltr553_get_ps_value</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ltr553.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>gpio_init_p_sensor_int</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[d5]"></a>icm_check_whoami</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>

<P><STRONG><a name="[d6]"></a>icm_reg_dump</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>

<P><STRONG><a name="[d7]"></a>icm_read_reg</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>

<P><STRONG><a name="[d8]"></a>icm_set_int_latched</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = icm_set_int_latched &rArr; icm20608_i2c_write &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sensors
</UL>

<P><STRONG><a name="[79]"></a>icm_set_sensors</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = icm_set_sensors &rArr; icm_set_int_latched &rArr; icm20608_i2c_write &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_int_latched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[d9]"></a>icm_set_bypass</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = icm_set_bypass &rArr; icm20608_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_init
</UL>

<P><STRONG><a name="[da]"></a>icm_reset_fifo</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = icm_reset_fifo &rArr; icm20608_i2c_write &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_configure_fifo
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_read_fifo
</UL>

<P><STRONG><a name="[7a]"></a>icm_configure_fifo</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = icm_configure_fifo &rArr; set_int_enable &rArr; icm20608_i2c_write &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_reset_fifo
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[db]"></a>icm_set_accel_lpf</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = icm_set_accel_lpf &rArr; icm20608_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sample_rate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[dc]"></a>icm_set_gyro_lpf</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = icm_set_gyro_lpf &rArr; icm20608_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sample_rate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[dd]"></a>icm_set_accel_fsr</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = icm_set_accel_fsr &rArr; icm20608_i2c_write &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[de]"></a>icm_set_gyro_fsr</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = icm_set_gyro_fsr &rArr; icm20608_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[e2]"></a>icm_get_fifo_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icm20608.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[7c]"></a>icm_get_sample_rate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icm20608.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[e1]"></a>icm_get_accel_lpf</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, icm20608.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[e0]"></a>icm_get_gyro_lpf</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, icm20608.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[7e]"></a>icm_get_accel_fsr</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, icm20608.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[7d]"></a>icm_get_gyro_fsr</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, icm20608.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[df]"></a>icm_lp_accel_mode</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + In Cycle
<LI>Call Chain = icm_lp_accel_mode &rArr;  icm_set_sample_rate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sensors
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sample_rate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_sample_rate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_gyro_fsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_accel_fsr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_configure_fifo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_gyro_lpf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_accel_lpf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_fifo_config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_fsr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_fsr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_lpf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_lpf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sample_rate
</UL>

<P><STRONG><a name="[7b]"></a>icm_set_sample_rate</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = icm_set_sample_rate &rArr; icm_lp_accel_mode &rArr;  icm_set_sample_rate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_lpf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_lpf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
</UL>

<P><STRONG><a name="[78]"></a>icm_init</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = icm_init &rArr; icm_set_sample_rate &rArr; icm_lp_accel_mode &rArr;  icm_set_sample_rate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sensors
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sample_rate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_configure_fifo
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_fsr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_fsr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_lpf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_lpf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_bypass
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>icm_set_gyro_avgf</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_6axis_mode
</UL>

<P><STRONG><a name="[e4]"></a>icm_lp_6axis_mode</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_avgf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>

<P><STRONG><a name="[84]"></a>icm_get_gyro_reg</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = icm_get_gyro_reg &rArr; icm20608_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>icm_get_accel_reg</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = icm_get_accel_reg &rArr; icm20608_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>icm_get_temperature</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>

<P><STRONG><a name="[ed]"></a>icm_read_accel_bias</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_bias_reg
</UL>

<P><STRONG><a name="[ee]"></a>icm_read_gyro_bias</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>

<P><STRONG><a name="[ef]"></a>icm_set_gyro_bias_reg</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>

<P><STRONG><a name="[f0]"></a>icm_set_accel_bias_reg</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_read_accel_bias
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>

<P><STRONG><a name="[1e0]"></a>icm_get_gyro_avgf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, icm20608.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>icm_get_accel_avgf</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, icm20608.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>icm_set_accel_avgf</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>

<P><STRONG><a name="[f2]"></a>icm_get_watermark</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>

<P><STRONG><a name="[f3]"></a>icm_set_watermark</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>

<P><STRONG><a name="[1e2]"></a>icm_get_gyro_sens</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, icm20608.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>icm_get_accel_sens</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, icm20608.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>icm_get_power_state</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, icm20608.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>icm_get_int_status</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>

<P><STRONG><a name="[f5]"></a>icm_read_fifo</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_reset_fifo
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>

<P><STRONG><a name="[1e5]"></a>icm_set_int_level</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icm20608.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>icm_run_self_test</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sensors
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sample_rate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_sample_rate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_gyro_fsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_accel_fsr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_configure_fifo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_gyro_lpf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_accel_lpf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_fifo_config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_fsr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_fsr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_lpf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_lpf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_20608_biases
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_20608_self_test
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_20608_self_test
</UL>

<P><STRONG><a name="[100]"></a>icm_lp_motion_interrupt</STRONG> (Thumb, 662 bytes, Stack size 32 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sensors
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sample_rate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_sample_rate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_gyro_fsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_accel_fsr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_configure_fifo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_gyro_lpf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_accel_lpf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_fifo_config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_fsr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_fsr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_lpf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_lpf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>

<P><STRONG><a name="[ab]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_init
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_20608_biases
</UL>

<P><STRONG><a name="[103]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_SLAVE_ReadData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_SLAVE_SendData
</UL>

<P><STRONG><a name="[105]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1e6]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_init
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1eb]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[108]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[47]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[10a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[1ed]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1ee]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1f2]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[109]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1f3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4e]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[10d]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[10c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[52]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[111]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[112]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_pressure_double
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_temperature_double
</UL>

<P><STRONG><a name="[116]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[11b]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_pressure_double
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_temperature_double
</UL>

<P><STRONG><a name="[119]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_pressure_double
</UL>

<P><STRONG><a name="[11a]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_temperature_double
</UL>

<P><STRONG><a name="[11c]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_pressure_double
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_temperature_double
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_20608_self_test
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_20608_self_test
</UL>

<P><STRONG><a name="[1f6]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_pressure_double
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_temperature_double
</UL>

<P><STRONG><a name="[1f7]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[fc]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_20608_self_test
</UL>

<P><STRONG><a name="[11d]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[120]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_pressure_double
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_temperature_double
</UL>

<P><STRONG><a name="[11e]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[115]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[118]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_20608_self_test
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_20608_self_test
</UL>

<P><STRONG><a name="[11f]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_pressure_double
</UL>

<P><STRONG><a name="[121]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_pressure_double
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_compensate_temperature_double
</UL>

<P><STRONG><a name="[123]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_20608_self_test
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_20608_self_test
</UL>

<P><STRONG><a name="[124]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_temperature
</UL>

<P><STRONG><a name="[126]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[12b]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_temperature
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_20608_self_test
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_20608_self_test
</UL>

<P><STRONG><a name="[128]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_temperature
</UL>

<P><STRONG><a name="[129]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_temperature
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_20608_self_test
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_20608_self_test
</UL>

<P><STRONG><a name="[1f8]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_temperature
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_20608_self_test
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_20608_self_test
</UL>

<P><STRONG><a name="[1f9]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[f9]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_20608_self_test
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_20608_self_test
</UL>

<P><STRONG><a name="[12a]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[12e]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_temperature
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_20608_self_test
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_20608_self_test
</UL>

<P><STRONG><a name="[12c]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[125]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[114]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_20608_self_test
</UL>

<P><STRONG><a name="[12d]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_temperature
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_20608_self_test
</UL>

<P><STRONG><a name="[12f]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[65]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[63]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[61]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[5f]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[88]"></a>SetSysClockToHSI</STRONG> (Thumb, 204 bytes, Stack size 12 bytes, system_stm32l1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockToHSI
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[87]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32l1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockToHSI
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[92]"></a>I2CDRV_InitHardware</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, i2c_slave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2CDRV_InitHardware &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_Init
</UL>

<P><STRONG><a name="[95]"></a>I2CDRV_Config</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, i2c_slave.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2CDRV_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ARPCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDRV_Init
</UL>

<P><STRONG><a name="[9c]"></a>I2Cx_TIMEOUT_UserCallback</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftwareResetCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write_register
</UL>

<P><STRONG><a name="[a4]"></a>akm09916_i2c_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, akm09916.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = akm09916_i2c_write &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak09916_soft_reset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak0991x_enable_sensor
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak09916_run_selftest
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak09916_poll_data
</UL>

<P><STRONG><a name="[a5]"></a>akm09916_i2c_read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, akm09916.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = akm09916_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak09916_run_selftest
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak09916_poll_data
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak09916_compare_whoami
</UL>

<P><STRONG><a name="[a7]"></a>bmp280_write_register</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bmp280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bmp280_write_register &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_set_filter_mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_set_pressure_oversampling_mode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_set_temperature_oversampling_mode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_set_work_mode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_set_standby_time
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_reset
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_init
</UL>

<P><STRONG><a name="[a8]"></a>bmp280_read_register</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bmp280.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bmp280_read_register &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_get_pressure
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_get_temperature
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp280_init
</UL>

<P><STRONG><a name="[c0]"></a>setup_timer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setup_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>

<P><STRONG><a name="[c4]"></a>start_timer</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = start_timer &rArr; setup_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_timer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[c6]"></a>stop_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stop_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[c8]"></a>internal_delay</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = internal_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[c9]"></a>ltr553_i2c_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ltr553.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ltr553_i2c_write &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr559_ps_enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_dev_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_als_enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_ps_set_thres
</UL>

<P><STRONG><a name="[ca]"></a>ltr553_i2c_read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ltr553.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ltr553_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr559_ps_enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr559_als_read
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_ps_read
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_dev_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_als_enable
</UL>

<P><STRONG><a name="[cb]"></a>ltr553_ps_set_thres</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ltr553.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltr553_i2c_write
</UL>

<P><STRONG><a name="[d2]"></a>icm20608_i2c_write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = icm20608_i2c_write &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sensors
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_sample_rate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_watermark
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_avgf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_bias_reg
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_bias_reg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_6axis_mode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_avgf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_fsr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_fsr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_lpf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_lpf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_reset_fifo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_bypass
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_int_latched
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_check_whoami
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_20608_biases
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>

<P><STRONG><a name="[d3]"></a>icm20608_i2c_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = icm20608_i2c_read &rArr; i2c_master_read_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_gyro_reg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_accel_reg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_read_fifo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_int_status
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_watermark
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_avgf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_read_gyro_bias
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_read_accel_bias
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_get_temperature
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_6axis_mode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_avgf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_accel_mode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_fsr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_gyro_lpf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_accel_lpf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_set_bypass
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_read_reg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_reg_dump
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_20608_biases
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_20608_self_test
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_20608_self_test
</UL>

<P><STRONG><a name="[d4]"></a>set_int_enable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, icm20608.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = set_int_enable &rArr; icm20608_i2c_write &rArr; i2c_master_write_register &rArr; I2Cx_TIMEOUT_UserCallback &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_configure_fifo
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_lp_motion_interrupt
</UL>

<P><STRONG><a name="[f6]"></a>accel_20608_self_test</STRONG> (Thumb, 414 bytes, Stack size 96 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
</UL>

<P><STRONG><a name="[fb]"></a>gyro_20608_self_test</STRONG> (Thumb, 388 bytes, Stack size 88 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
</UL>

<P><STRONG><a name="[fd]"></a>get_st_20608_biases</STRONG> (Thumb, 1210 bytes, Stack size 568 bytes, icm20608.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20608_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_run_self_test
</UL>

<P><STRONG><a name="[122]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[117]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[130]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[127]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
